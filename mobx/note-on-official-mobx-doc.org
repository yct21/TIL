* Mobx
** Concepts and Principle
*** Concepts
**** State
State is the data that drives your application. Usually there is domain specific
state like a list of todo items and there is view state such as the currently
selected element. Remember, state is like spreadsheets cells that hold a value.
**** Derivations
Anything that can be derived from the state without any further interaction is a
derivation. Derivations exist in many forms:

- The user interface.
- Derived data, such as the number of todos left.
- Backend integrations like sending changes to the server.

MobX distinguishes two kind of derivations:

- Computed values. These are values that can always be derived from the current
  observable state using a pure function.

- Reactions. Reactions are side effects that need to happen automatically if the
state changes. These are needed as a bridge between imperative and reactive
programming. Or to make it more clear, they are ultimately needed to achieve
I/O.

If you want to create a value based on the current state, use /computed/.

**** Actions
An action is any piece of code that changes the state. User events, backend data
pushes, scheduled events, etc. An action is like a user that enters a new value
in a spreadsheet cell.

Actions can be defined explicitly in MobX to help you to structure code more
clearly. If MobX is used in strict mode, MobX will enforce that no state can be
modified outside actions.

*** Principle
MobX supports a uni-directional data flow where actions change the state, which
in turn updates all affected views.


[[file:../.assets/Mobx/action-state-view_2017-06-19_23-38-50.png]]

All Derivations are updated *automatically* and atomically when the state changes.
As a result it is never possible to observe intermediate values.

All Derivations are updated *synchronously* by default. This means that, for
example, actions can safely inspect a computed value directly after altering the
state.

Computed values are updated *lazily*. Any computed value that is not actively in
use will not be updated until it is needed for a side effect (I/O). If a view is
no longer in use it will be garbage collected automatically.

All Computed values should be *pure*. They are not supposed to change state.

*** Illustration

#+BEGIN_SRC js
import {observable, autorun} from 'mobx';

var todoStore = observable({
    /* some observable state */
    todos: [],

    /* a derived value */
    get completedCount() {
        return this.todos.filter(todo => todo.completed).length;
    }
});

/* a function that observes the state */
autorun(function() {
    console.log("Completed %d of %d items",
        todoStore.completedCount,
        todoStore.todos.length
    );
});

/* ..and some actions that modify the state */
todoStore.todos[0] = {
    title: "Take a walk",
    completed: false
};
// -> synchronously prints 'Completed 0 of 1 items'

todoStore.todos[0].completed = true;
// -> synchronously prints 'Completed 1 of 1 items'
#+END_SRC

*** What does Mobx reacts to

[[file:../.assets/Mobx/observed-refs_2017-06-20_09-03-44.png]]

What MobX basically does is recording which arrows you use in your function.
After that, it will re-run whenever one of this arrows changes; when they start
to refer to something else. It tracks property access, not values.

** Api Overview
*** Creating Observable
**** ~observable(object)~
If a plain JavaScript object is passed to ~observable~ all properties inside will
be copied into a clone and made observable.

~observable~ is by default applied recursively, so if one of the encoutered values
is an object or array, that value will be passed through ~observable~ as well.

When passing objects through ~observable~, only the properties that exist at the
time of making the object observable will be observable. Properties that are
added to the object at a later time won't become observable, unless
~extendObservable~ is used.

**** ~observable(array)~
Due to limitations of native arrays in ES5 ~observable.array~ will create a
faux-array (array-like object) instead of a real array. In practice, these
arrays work just as fine as native arrays and all native methods are supported,
including index assignments, up-to and including the length of the array.
However ~Array.isArray(observable([]))~ will yield ~false~.

**** ~observable.map(values)~
~observable.map(values?)~ creates a dynamic keyed observable map.

**** boxed value

~observable.box(value)~ accepts any value and stores it inside a box. The
current value can be accessed through ~.get()~ and updated using ~.set(newValue)~.

In rare cases it can be convenient to have an observable "primitive" that is
not owned by an object. For these cases it is possible to create an observable
box that manages such a primitive.

*** Decorators
**** ~@observable~
Decorator that can be used on ES7- or TypeScript class properties to make them
observable. The ~@observable~ can be used on instance fields and property getters.
This offers fine-grained control on which parts of your object become
observable.

**** ~@computed~
Computed values are values that can be derived from the existing state or other
computed values.

**** ~@observer~
The ~observer~ function / decorator can be used to turn ReactJS components into
reactive components. It wraps the component's render function in ~mobx.autorun~ to
make sure that any data that is used during the rendering of a component forces
a re-rendering upon change.

**** ~@action~
Actions are anything that modify the state. With MobX you can make it explicit
in your code where your actions live by marking them with ~@action~.

~action~ only affects the currently running function, not functions that are
scheduled (but not invoked) by the current function. This means that if you have
a ~setTimeout~, ~promise.then~ or async construction, and in that callback some more
state is changed, those callbacks should be wrapped in ~@action~ as well.

**** ~@action.bound~
Mobx 3 introduces action.bound to automatically bind actions to the targeted
object.

** Tips
*** Use ~@observer~ on all components that render ~@observables~
~@observer~ only enhances the component you are decorating, not the components
used inside it. So usually all your components should be decorated. Don't worry,
this is not inefficient, in contrast, more ~observer~ components make rendering
more efficient.

*** Use function declarations instead of arrow functions inside of ~observable~
It would allow you to see the component name in Devtool

*** Make sure your top-level component is a stateful observer
To enable HMR.
